/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ChatPayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cUSD"
      | "owner"
      | "payPerMessage"
      | "setTreasury"
      | "treasury"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessagePaid"): EventFragment;

  encodeFunctionData(functionFragment: "cUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payPerMessage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace MessagePaidEvent {
  export type InputTuple = [
    payer: AddressLike,
    messageId: string,
    amount: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    messageId: string,
    amount: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    payer: string;
    messageId: string;
    amount: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChatPay extends BaseContract {
  connect(runner?: ContractRunner | null): ChatPay;
  waitForDeployment(): Promise<this>;

  interface: ChatPayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cUSD: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payPerMessage: TypedContractMethod<
    [messageId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<[_t: AddressLike], [void], "nonpayable">;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payPerMessage"
  ): TypedContractMethod<
    [messageId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_t: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MessagePaid"
  ): TypedContractEvent<
    MessagePaidEvent.InputTuple,
    MessagePaidEvent.OutputTuple,
    MessagePaidEvent.OutputObject
  >;

  filters: {
    "MessagePaid(address,string,uint256,uint256)": TypedContractEvent<
      MessagePaidEvent.InputTuple,
      MessagePaidEvent.OutputTuple,
      MessagePaidEvent.OutputObject
    >;
    MessagePaid: TypedContractEvent<
      MessagePaidEvent.InputTuple,
      MessagePaidEvent.OutputTuple,
      MessagePaidEvent.OutputObject
    >;
  };
}
