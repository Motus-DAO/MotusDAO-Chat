/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConsentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "consents"
      | "grantConsent"
      | "hasConsent"
      | "revokeConsent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ConsentGranted" | "ConsentRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "consents",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantConsent",
    values: [BigNumberish, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasConsent",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConsent",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "consents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasConsent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConsent",
    data: BytesLike
  ): Result;
}

export namespace ConsentGrantedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    policyHash: BytesLike,
    cidRoot: string,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    policyHash: string,
    cidRoot: string,
    expiry: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    policyHash: string;
    cidRoot: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentRevokedEvent {
  export type InputTuple = [tokenId: BigNumberish, policyHash: BytesLike];
  export type OutputTuple = [tokenId: bigint, policyHash: string];
  export interface OutputObject {
    tokenId: bigint;
    policyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConsentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ConsentRegistry;
  waitForDeployment(): Promise<this>;

  interface: ConsentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consents: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [
      [string, bigint, boolean] & {
        cidRoot: string;
        expiry: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  grantConsent: TypedContractMethod<
    [
      tokenId: BigNumberish,
      policyHash: BytesLike,
      cidRoot: string,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  hasConsent: TypedContractMethod<
    [tokenId: BigNumberish, policyHash: BytesLike],
    [boolean],
    "view"
  >;

  revokeConsent: TypedContractMethod<
    [tokenId: BigNumberish, policyHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consents"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [
      [string, bigint, boolean] & {
        cidRoot: string;
        expiry: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantConsent"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      policyHash: BytesLike,
      cidRoot: string,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasConsent"
  ): TypedContractMethod<
    [tokenId: BigNumberish, policyHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeConsent"
  ): TypedContractMethod<
    [tokenId: BigNumberish, policyHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConsentGranted"
  ): TypedContractEvent<
    ConsentGrantedEvent.InputTuple,
    ConsentGrantedEvent.OutputTuple,
    ConsentGrantedEvent.OutputObject
  >;
  getEvent(
    key: "ConsentRevoked"
  ): TypedContractEvent<
    ConsentRevokedEvent.InputTuple,
    ConsentRevokedEvent.OutputTuple,
    ConsentRevokedEvent.OutputObject
  >;

  filters: {
    "ConsentGranted(uint256,bytes32,string,uint64)": TypedContractEvent<
      ConsentGrantedEvent.InputTuple,
      ConsentGrantedEvent.OutputTuple,
      ConsentGrantedEvent.OutputObject
    >;
    ConsentGranted: TypedContractEvent<
      ConsentGrantedEvent.InputTuple,
      ConsentGrantedEvent.OutputTuple,
      ConsentGrantedEvent.OutputObject
    >;

    "ConsentRevoked(uint256,bytes32)": TypedContractEvent<
      ConsentRevokedEvent.InputTuple,
      ConsentRevokedEvent.OutputTuple,
      ConsentRevokedEvent.OutputObject
    >;
    ConsentRevoked: TypedContractEvent<
      ConsentRevokedEvent.InputTuple,
      ConsentRevokedEvent.OutputTuple,
      ConsentRevokedEvent.OutputObject
    >;
  };
}
