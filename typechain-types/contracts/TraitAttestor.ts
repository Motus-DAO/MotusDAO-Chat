/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TraitAttestorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "ATTESTER"
      | "HUMAN_VERIFIED"
      | "SCHEMA_ID"
      | "VERIFIED_PSYCHOLOGIST"
      | "attest"
      | "attestations"
      | "hasRole"
      | "hasTrait"
      | "revoke"
      | "setRole"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Attested" | "Revoked"): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "ATTESTER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "HUMAN_VERIFIED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SCHEMA_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VERIFIED_PSYCHOLOGIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attest",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTrait",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [AddressLike, BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ATTESTER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HUMAN_VERIFIED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCHEMA_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIED_PSYCHOLOGIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasTrait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;
}

export namespace AttestedEvent {
  export type InputTuple = [
    schemaId: BytesLike,
    attester: AddressLike,
    tokenId: BigNumberish,
    traitId: BytesLike,
    proofHash: BytesLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    schemaId: string,
    attester: string,
    tokenId: bigint,
    traitId: string,
    proofHash: string,
    expiry: bigint
  ];
  export interface OutputObject {
    schemaId: string;
    attester: string;
    tokenId: bigint;
    traitId: string;
    proofHash: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [
    schemaId: BytesLike,
    attester: AddressLike,
    tokenId: BigNumberish,
    traitId: BytesLike
  ];
  export type OutputTuple = [
    schemaId: string,
    attester: string,
    tokenId: bigint,
    traitId: string
  ];
  export interface OutputObject {
    schemaId: string;
    attester: string;
    tokenId: bigint;
    traitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TraitAttestor extends BaseContract {
  connect(runner?: ContractRunner | null): TraitAttestor;
  waitForDeployment(): Promise<this>;

  interface: TraitAttestorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  ATTESTER: TypedContractMethod<[], [string], "view">;

  HUMAN_VERIFIED: TypedContractMethod<[], [string], "view">;

  SCHEMA_ID: TypedContractMethod<[], [string], "view">;

  VERIFIED_PSYCHOLOGIST: TypedContractMethod<[], [string], "view">;

  attest: TypedContractMethod<
    [
      tokenId: BigNumberish,
      traitId: BytesLike,
      proofHash: BytesLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  attestations: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [
      [string, bigint, string, string, bigint, bigint] & {
        attester: string;
        tokenId: bigint;
        traitId: string;
        proofHash: string;
        issuedAt: bigint;
        expiry: bigint;
      }
    ],
    "view"
  >;

  hasRole: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  hasTrait: TypedContractMethod<
    [tokenId: BigNumberish, traitId: BytesLike],
    [boolean],
    "view"
  >;

  revoke: TypedContractMethod<
    [tokenId: BigNumberish, traitId: BytesLike],
    [void],
    "nonpayable"
  >;

  setRole: TypedContractMethod<
    [a: AddressLike, r: BytesLike, v: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ATTESTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HUMAN_VERIFIED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SCHEMA_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIED_PSYCHOLOGIST"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attest"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      traitId: BytesLike,
      proofHash: BytesLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [
      [string, bigint, string, string, bigint, bigint] & {
        attester: string;
        tokenId: bigint;
        traitId: string;
        proofHash: string;
        issuedAt: bigint;
        expiry: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasTrait"
  ): TypedContractMethod<
    [tokenId: BigNumberish, traitId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [tokenId: BigNumberish, traitId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRole"
  ): TypedContractMethod<
    [a: AddressLike, r: BytesLike, v: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Attested"
  ): TypedContractEvent<
    AttestedEvent.InputTuple,
    AttestedEvent.OutputTuple,
    AttestedEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;

  filters: {
    "Attested(bytes32,address,uint256,bytes32,bytes32,uint64)": TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;
    Attested: TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;

    "Revoked(bytes32,address,uint256,bytes32)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
  };
}
