/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ChatPay,
  ChatPayInterface,
} from "../../../contracts/ChatPay.sol/ChatPay";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cUSD",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "payer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "messageId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ts",
        type: "uint256",
      },
    ],
    name: "MessagePaid",
    type: "event",
  },
  {
    inputs: [],
    name: "cUSD",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "messageId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payPerMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_t",
        type: "address",
      },
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516104e43803806104e483398101604081905261002f91610093565b600180546001600160a01b031990811633179091556000805490911673f229f3dcea3d7cd3ca5ca41c4c50135d7b37f2b91790556001600160a01b03811660805250506100c6565b80516001600160a01b038116811461008e57600080fd5b919050565b600080604083850312156100a657600080fd5b6100af83610077565b91506100bd60208401610077565b90509250929050565b6080516103fd6100e7600039600081816061015261018901526103fd6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631fccf6721461005c5780634e957b761461009f57806361d027b3146100b45780638da5cb5b146100c7578063f0f44260146100da575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100b26100ad3660046102ed565b6100ed565b005b600054610083906001600160a01b031681565b600154610083906001600160a01b031681565b6100b26100e8366004610365565b610285565b816101245760405162461bcd60e51b81526020600482015260026024820152611a5960f21b60448201526064015b60405180910390fd5b6000811161015a5760405162461bcd60e51b8152602060048201526003602482015262185b5d60ea1b604482015260640161011b565b6000546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f89190610395565b61022f5760405162461bcd60e51b81526020600482015260086024820152673a3930b739b332b960c11b604482015260640161011b565b828260405161023f9291906103b7565b604080519182900382208383524260208401529133917f1b597d40d321e1c68f6f8b2082b95680839ddf650440980a625f6d7e83d9723e910160405180910390a3505050565b6001546001600160a01b031633146102cb5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b604482015260640161011b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008060006040848603121561030257600080fd5b833567ffffffffffffffff8082111561031a57600080fd5b818601915086601f83011261032e57600080fd5b81358181111561033d57600080fd5b87602082850101111561034f57600080fd5b6020928301989097509590910135949350505050565b60006020828403121561037757600080fd5b81356001600160a01b038116811461038e57600080fd5b9392505050565b6000602082840312156103a757600080fd5b8151801515811461038e57600080fd5b818382376000910190815291905056fea2646970667358221220661cc4a823ac9c3c54a69f25fa93771fe6281b464384f4bc669567c2053ba37964736f6c63430008180033";

type ChatPayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChatPayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChatPay__factory extends ContractFactory {
  constructor(...args: ChatPayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _treasury: AddressLike,
    _cUSD: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_treasury, _cUSD, overrides || {});
  }
  override deploy(
    _treasury: AddressLike,
    _cUSD: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_treasury, _cUSD, overrides || {}) as Promise<
      ChatPay & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ChatPay__factory {
    return super.connect(runner) as ChatPay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChatPayInterface {
    return new Interface(_abi) as ChatPayInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ChatPay {
    return new Contract(address, _abi, runner) as unknown as ChatPay;
  }
}
